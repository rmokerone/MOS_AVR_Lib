
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000007de  00000872  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800126  00800126  00000898  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000898  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000005b  00000000  00000000  00000ffb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00001056  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000086d  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000045e  00000000  00000000  00001923  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000371  00000000  00000000  00001d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000f4  00000000  00000000  000020f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000031a  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000025e  00000000  00000000  00002502  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000010  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	9c c0       	rjmp	.+312    	; 0x15e <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ee ed       	ldi	r30, 0xDE	; 222
  48:	f7 e0       	ldi	r31, 0x07	; 7
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 32       	cpi	r26, 0x26	; 38
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a6 e2       	ldi	r26, 0x26	; 38
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ae 32       	cpi	r26, 0x2E	; 46
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	8f d0       	rcall	.+286    	; 0x186 <main>
  68:	b8 c3       	rjmp	.+1904   	; 0x7da <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <MOS_SPI_Init>:
    uint8 spi_csn_ddr = spi_csn_structure.SPI_CSN_DDR;
    //SPI片选端口
    uint8 spi_csn_pin = spi_csn_structure.SPI_CSN_PIN;

    //初始化输出端口
    DDRB |= (1<<MOSI) | (1<< SCK) | (1<<CSN);
  6c:	94 b1       	in	r25, 0x04	; 4
  6e:	9c 62       	ori	r25, 0x2C	; 44
  70:	94 b9       	out	0x04, r25	; 4
    //初始化输入端口
    DDRB &= ~(1<<MISO);
  72:	24 98       	cbi	0x04, 4	; 4

    //选择为从机模式
    if (spi_mode == SPI_MODE_SLAVE)
  74:	81 30       	cpi	r24, 0x01	; 1
  76:	31 f0       	breq	.+12     	; 0x84 <MOS_SPI_Init+0x18>

    }
    //选择为主机模式
    else
    {
        SPCR |= (1<<SPE) | (1<<MSTR);
  78:	8c b5       	in	r24, 0x2c	; 44
  7a:	80 65       	ori	r24, 0x50	; 80
  7c:	8c bd       	out	0x2c, r24	; 44
        //CSN置为高电平
        PORTB |= (1<<CSN);
  7e:	2a 9a       	sbi	0x05, 2	; 5
            spi_csn_port |= (1<<spi_csn_pin);
        }

    }
    return 1;
}
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	08 95       	ret
    DDRB &= ~(1<<MISO);

    //选择为从机模式
    if (spi_mode == SPI_MODE_SLAVE)
    {
        SPCR &= ~(1<<MSTR);
  84:	8c b5       	in	r24, 0x2c	; 44
  86:	8f 7e       	andi	r24, 0xEF	; 239
  88:	8c bd       	out	0x2c, r24	; 44
        SPCR |=  (1<<SPE);
  8a:	8c b5       	in	r24, 0x2c	; 44
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	8c bd       	out	0x2c, r24	; 44
            spi_csn_port |= (1<<spi_csn_pin);
        }

    }
    return 1;
}
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	08 95       	ret

00000094 <MOS_SPI_Master_WriteRead>:
                               uint8 data, uint8 csn_state)
 {
     uint8 spi_csn_port = spi_csn_structure.SPI_CSN_PORT;
     uint8 spi_csn_pin = spi_csn_structure.SPI_CSN_PIN;
    //将CSN置为低电平
     if ((spi_csn_port == 0)||(spi_csn_port == 0))
  94:	61 11       	cpse	r22, r1
  96:	0c c0       	rjmp	.+24     	; 0xb0 <MOS_SPI_Master_WriteRead+0x1c>
     {
         PORTB &= ~(1<<CSN);
  98:	2a 98       	cbi	0x05, 2	; 5
     else
     {
         spi_csn_port &= ~(1<<spi_csn_pin);
     }
     //交换数据
     SPDR = data;
  9a:	4e bd       	out	0x2e, r20	; 46
     while (!(SPSR & (1<SPIF)));
  9c:	0d b4       	in	r0, 0x2d	; 45
  9e:	00 fe       	sbrs	r0, 0
  a0:	fd cf       	rjmp	.-6      	; 0x9c <MOS_SPI_Master_WriteRead+0x8>
     if (csn_state == SPI_CSN_ASSERTED)
  a2:	21 30       	cpi	r18, 0x01	; 1
  a4:	19 f0       	breq	.+6      	; 0xac <MOS_SPI_Master_WriteRead+0x18>
     {
        //不改变 
     }
     else 
     {
        if ((spi_csn_port == 0)||(spi_csn_port == 0))
  a6:	61 11       	cpse	r22, r1
  a8:	01 c0       	rjmp	.+2      	; 0xac <MOS_SPI_Master_WriteRead+0x18>
        {
            PORTB |= (1<<CSN);
  aa:	2a 9a       	sbi	0x05, 2	; 5
        {
             spi_csn_port |= (1<<spi_csn_pin);
        }
    
     }
     return SPDR;
  ac:	8e b5       	in	r24, 0x2e	; 46
 }
  ae:	08 95       	ret
     {
         PORTB &= ~(1<<CSN);
     }
     else
     {
         spi_csn_port &= ~(1<<spi_csn_pin);
  b0:	e1 e0       	ldi	r30, 0x01	; 1
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	08 2e       	mov	r0, r24
  b6:	01 c0       	rjmp	.+2      	; 0xba <MOS_SPI_Master_WriteRead+0x26>
  b8:	ee 0f       	add	r30, r30
  ba:	0a 94       	dec	r0
  bc:	ea f7       	brpl	.-6      	; 0xb8 <MOS_SPI_Master_WriteRead+0x24>
  be:	e0 95       	com	r30
  c0:	6e 23       	and	r22, r30
  c2:	eb cf       	rjmp	.-42     	; 0x9a <MOS_SPI_Master_WriteRead+0x6>

000000c4 <MOS_SPI_Master_Read>:
 *   从从机中读取到的数据
 */
 uint8 MOS_SPI_Master_Read (SPI_CSN_TypeDef spi_csn_structure)
 {
     uint8 data;
     data = MOS_SPI_Master_WriteRead(spi_csn_structure,
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	e5 cf       	rjmp	.-54     	; 0x94 <MOS_SPI_Master_WriteRead>

000000ca <MOS_SPI_Master_Write>:
  *     1 -- 成功
  */
  uint8 MOS_SPI_Master_Write (SPI_CSN_TypeDef spi_csn_structure
                            ,uint8 data)
  {
      MOS_SPI_Master_WriteRead(spi_csn_structure,
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	e3 df       	rcall	.-58     	; 0x94 <MOS_SPI_Master_WriteRead>
                              data,
                              SPI_CSN_INACTIVE);
      return 1;
  }
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	08 95       	ret

000000d2 <MOS_UART_Init>:
 * 输出：
 *    0 -- 配置成功
 *    1 -- 配置错误
 */ 
uint8 MOS_UART_Init (UART_InitTypeDef uart_init_structure)
{
  d2:	9b 01       	movw	r18, r22
  d4:	ac 01       	movw	r20, r24
    uint32 uart_baud = uart_init_structure.UART_BAUD;
    uint32 uart_baud_setting = (uint32)((uint32)CRYSTAL/
                            (16*(uint32)uart_baud)-1);
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	44 1f       	adc	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	44 1f       	adc	r20, r20
  e4:	55 1f       	adc	r21, r21
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	44 1f       	adc	r20, r20
  ec:	55 1f       	adc	r21, r21
  ee:	22 0f       	add	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	44 1f       	adc	r20, r20
  f4:	55 1f       	adc	r21, r21
 *    1 -- 配置错误
 */ 
uint8 MOS_UART_Init (UART_InitTypeDef uart_init_structure)
{
    uint32 uart_baud = uart_init_structure.UART_BAUD;
    uint32 uart_baud_setting = (uint32)((uint32)CRYSTAL/
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	72 e1       	ldi	r23, 0x12	; 18
  fa:	8a e7       	ldi	r24, 0x7A	; 122
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	67 d0       	rcall	.+206    	; 0x1ce <__udivmodsi4>
 100:	21 50       	subi	r18, 0x01	; 1
 102:	31 09       	sbc	r19, r1
 104:	41 09       	sbc	r20, r1
 106:	51 09       	sbc	r21, r1
                            (16*(uint32)uart_baud)-1);
    DDRD |= (1<<PD1);
 108:	51 9a       	sbi	0x0a, 1	; 10
    PORTD |= (1<<PD0)|(1<<PD1);
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	83 60       	ori	r24, 0x03	; 3
 10e:	8b b9       	out	0x0b, r24	; 11
    
    UBRR0H = (uint8)(uart_baud_setting>>8);
 110:	bb 27       	eor	r27, r27
 112:	a5 2f       	mov	r26, r21
 114:	94 2f       	mov	r25, r20
 116:	83 2f       	mov	r24, r19
 118:	80 93 c5 00 	sts	0x00C5, r24
    UBRR0L = (uint8)(uart_baud_setting);
 11c:	20 93 c4 00 	sts	0x00C4, r18
    UCSR0A = 0x00;
 120:	10 92 c0 00 	sts	0x00C0, r1
    //8位数据位 1位停止位 无奇偶校验位
    UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	80 93 c2 00 	sts	0x00C2, r24
    //接收结束中断使能
    //接收使能
    //发送使能
    UCSR0B = (1<<RXCIE0)|
 12a:	88 e9       	ldi	r24, 0x98	; 152
 12c:	80 93 c1 00 	sts	0x00C1, r24
             (1<<RXEN0)|
             (1<<TXEN0);
    //开启全局中断
    sei();
 130:	78 94       	sei
    //成功返回
    return 0;
}
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 95       	ret

00000136 <MOS_UART_Write>:
 * 输出：
 *    0 -- 写入成功
 *    1 -- 写入错误
 */
int MOS_UART_Write (char data, FILE * stream)
{
 136:	cf 93       	push	r28
 138:	c8 2f       	mov	r28, r24
    if (data == '\n')
 13a:	8a 30       	cpi	r24, 0x0A	; 10
 13c:	51 f0       	breq	.+20     	; 0x152 <MOS_UART_Write+0x1c>
    MOS_UART_Write ('\r', stream);
    loop_until_bit_is_set (UCSR0A, UDRE0);
 13e:	90 91 c0 00 	lds	r25, 0x00C0
 142:	95 ff       	sbrs	r25, 5
 144:	fc cf       	rjmp	.-8      	; 0x13e <MOS_UART_Write+0x8>
    UDR0 = data;
 146:	c0 93 c6 00 	sts	0x00C6, r28
    //写入成功
    return 0;
}
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	cf 91       	pop	r28
 150:	08 95       	ret
 *    1 -- 写入错误
 */
int MOS_UART_Write (char data, FILE * stream)
{
    if (data == '\n')
    MOS_UART_Write ('\r', stream);
 152:	8d e0       	ldi	r24, 0x0D	; 13
 154:	f0 df       	rcall	.-32     	; 0x136 <MOS_UART_Write>
 156:	f3 cf       	rjmp	.-26     	; 0x13e <MOS_UART_Write+0x8>

00000158 <MOS_UART_Read>:
 *     单位为一个字节
 */
uint8 MOS_UART_Read (void)
{
    uint8 data;
    data = UART_RX_BUFF;
 158:	80 91 27 01 	lds	r24, 0x0127
    return data;
}
 15c:	08 95       	ret

0000015e <__vector_18>:

//UART数据接收接受触发中断
ISR (USART_RX_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
    uint8 status;
    status = UCSR0A;
 16a:	80 91 c0 00 	lds	r24, 0x00C0
    if ((status &((1<<DOR0)|(1<<FE0)))==0)
 16e:	88 71       	andi	r24, 0x18	; 24
 170:	21 f4       	brne	.+8      	; 0x17a <__vector_18+0x1c>
    {
       UART_RX_BUFF = UDR0;
 172:	80 91 c6 00 	lds	r24, 0x00C6
 176:	80 93 27 01 	sts	0x0127, r24
    }
} 
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <main>:
{
    uint8 data;
    //测试UART
    UART_InitTypeDef uart_init_instruct;
    uart_init_instruct.UART_BAUD = 9600;
    MOS_UART_Init (uart_init_instruct);
 186:	60 e8       	ldi	r22, 0x80	; 128
 188:	75 e2       	ldi	r23, 0x25	; 37
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	a1 df       	rcall	.-190    	; 0xd2 <MOS_UART_Init>

    //转化为标准输出
    stdout = &mystdout;
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	90 93 2b 01 	sts	0x012B, r25
 198:	80 93 2a 01 	sts	0x012A, r24

    while (1)
    {
        data = MOS_UART_Read();
        printf ("data = %x\n", data);
 19c:	ce e0       	ldi	r28, 0x0E	; 14
 19e:	d1 e0       	ldi	r29, 0x01	; 1
    //转化为标准输出
    stdout = &mystdout;

    while (1)
    {
        data = MOS_UART_Read();
 1a0:	db df       	rcall	.-74     	; 0x158 <MOS_UART_Read>
        printf ("data = %x\n", data);
 1a2:	1f 92       	push	r1
 1a4:	8f 93       	push	r24
 1a6:	df 93       	push	r29
 1a8:	cf 93       	push	r28
 1aa:	33 d0       	rcall	.+102    	; 0x212 <printf>
        printf ("hi i'm jack!\n");
 1ac:	89 e1       	ldi	r24, 0x19	; 25
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	41 d0       	rcall	.+130    	; 0x234 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	24 e3       	ldi	r18, 0x34	; 52
 1b6:	8c e0       	ldi	r24, 0x0C	; 12
 1b8:	91 50       	subi	r25, 0x01	; 1
 1ba:	20 40       	sbci	r18, 0x00	; 0
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x32>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x3c>
 1c2:	00 00       	nop
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	e9 cf       	rjmp	.-46     	; 0x1a0 <main+0x1a>

000001ce <__udivmodsi4>:
 1ce:	a1 e2       	ldi	r26, 0x21	; 33
 1d0:	1a 2e       	mov	r1, r26
 1d2:	aa 1b       	sub	r26, r26
 1d4:	bb 1b       	sub	r27, r27
 1d6:	fd 01       	movw	r30, r26
 1d8:	0d c0       	rjmp	.+26     	; 0x1f4 <__udivmodsi4_ep>

000001da <__udivmodsi4_loop>:
 1da:	aa 1f       	adc	r26, r26
 1dc:	bb 1f       	adc	r27, r27
 1de:	ee 1f       	adc	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	a2 17       	cp	r26, r18
 1e4:	b3 07       	cpc	r27, r19
 1e6:	e4 07       	cpc	r30, r20
 1e8:	f5 07       	cpc	r31, r21
 1ea:	20 f0       	brcs	.+8      	; 0x1f4 <__udivmodsi4_ep>
 1ec:	a2 1b       	sub	r26, r18
 1ee:	b3 0b       	sbc	r27, r19
 1f0:	e4 0b       	sbc	r30, r20
 1f2:	f5 0b       	sbc	r31, r21

000001f4 <__udivmodsi4_ep>:
 1f4:	66 1f       	adc	r22, r22
 1f6:	77 1f       	adc	r23, r23
 1f8:	88 1f       	adc	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	1a 94       	dec	r1
 1fe:	69 f7       	brne	.-38     	; 0x1da <__udivmodsi4_loop>
 200:	60 95       	com	r22
 202:	70 95       	com	r23
 204:	80 95       	com	r24
 206:	90 95       	com	r25
 208:	9b 01       	movw	r18, r22
 20a:	ac 01       	movw	r20, r24
 20c:	bd 01       	movw	r22, r26
 20e:	cf 01       	movw	r24, r30
 210:	08 95       	ret

00000212 <printf>:
 212:	a0 e0       	ldi	r26, 0x00	; 0
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	ee e0       	ldi	r30, 0x0E	; 14
 218:	f1 e0       	ldi	r31, 0x01	; 1
 21a:	b8 c2       	rjmp	.+1392   	; 0x78c <__prologue_saves__+0x20>
 21c:	fe 01       	movw	r30, r28
 21e:	35 96       	adiw	r30, 0x05	; 5
 220:	61 91       	ld	r22, Z+
 222:	71 91       	ld	r23, Z+
 224:	af 01       	movw	r20, r30
 226:	80 91 2a 01 	lds	r24, 0x012A
 22a:	90 91 2b 01 	lds	r25, 0x012B
 22e:	31 d0       	rcall	.+98     	; 0x292 <vfprintf>
 230:	e2 e0       	ldi	r30, 0x02	; 2
 232:	c8 c2       	rjmp	.+1424   	; 0x7c4 <__epilogue_restores__+0x20>

00000234 <puts>:
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	8c 01       	movw	r16, r24
 23e:	e0 91 2a 01 	lds	r30, 0x012A
 242:	f0 91 2b 01 	lds	r31, 0x012B
 246:	83 81       	ldd	r24, Z+3	; 0x03
 248:	81 ff       	sbrs	r24, 1
 24a:	1b c0       	rjmp	.+54     	; 0x282 <puts+0x4e>
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	d0 e0       	ldi	r29, 0x00	; 0
 250:	05 c0       	rjmp	.+10     	; 0x25c <puts+0x28>
 252:	09 95       	icall
 254:	89 2b       	or	r24, r25
 256:	11 f0       	breq	.+4      	; 0x25c <puts+0x28>
 258:	cf ef       	ldi	r28, 0xFF	; 255
 25a:	df ef       	ldi	r29, 0xFF	; 255
 25c:	f8 01       	movw	r30, r16
 25e:	81 91       	ld	r24, Z+
 260:	8f 01       	movw	r16, r30
 262:	60 91 2a 01 	lds	r22, 0x012A
 266:	70 91 2b 01 	lds	r23, 0x012B
 26a:	db 01       	movw	r26, r22
 26c:	18 96       	adiw	r26, 0x08	; 8
 26e:	ed 91       	ld	r30, X+
 270:	fc 91       	ld	r31, X
 272:	19 97       	sbiw	r26, 0x09	; 9
 274:	81 11       	cpse	r24, r1
 276:	ed cf       	rjmp	.-38     	; 0x252 <puts+0x1e>
 278:	8a e0       	ldi	r24, 0x0A	; 10
 27a:	09 95       	icall
 27c:	89 2b       	or	r24, r25
 27e:	09 f4       	brne	.+2      	; 0x282 <puts+0x4e>
 280:	02 c0       	rjmp	.+4      	; 0x286 <puts+0x52>
 282:	cf ef       	ldi	r28, 0xFF	; 255
 284:	df ef       	ldi	r29, 0xFF	; 255
 286:	ce 01       	movw	r24, r28
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	08 95       	ret

00000292 <vfprintf>:
 292:	ac e0       	ldi	r26, 0x0C	; 12
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	ee e4       	ldi	r30, 0x4E	; 78
 298:	f1 e0       	ldi	r31, 0x01	; 1
 29a:	68 c2       	rjmp	.+1232   	; 0x76c <__prologue_saves__>
 29c:	7c 01       	movw	r14, r24
 29e:	6b 01       	movw	r12, r22
 2a0:	8a 01       	movw	r16, r20
 2a2:	fc 01       	movw	r30, r24
 2a4:	17 82       	std	Z+7, r1	; 0x07
 2a6:	16 82       	std	Z+6, r1	; 0x06
 2a8:	83 81       	ldd	r24, Z+3	; 0x03
 2aa:	81 ff       	sbrs	r24, 1
 2ac:	b9 c1       	rjmp	.+882    	; 0x620 <__stack+0x121>
 2ae:	88 24       	eor	r8, r8
 2b0:	83 94       	inc	r8
 2b2:	91 2c       	mov	r9, r1
 2b4:	8c 0e       	add	r8, r28
 2b6:	9d 1e       	adc	r9, r29
 2b8:	f7 01       	movw	r30, r14
 2ba:	93 81       	ldd	r25, Z+3	; 0x03
 2bc:	f6 01       	movw	r30, r12
 2be:	93 fd       	sbrc	r25, 3
 2c0:	85 91       	lpm	r24, Z+
 2c2:	93 ff       	sbrs	r25, 3
 2c4:	81 91       	ld	r24, Z+
 2c6:	6f 01       	movw	r12, r30
 2c8:	88 23       	and	r24, r24
 2ca:	09 f4       	brne	.+2      	; 0x2ce <vfprintf+0x3c>
 2cc:	a5 c1       	rjmp	.+842    	; 0x618 <__stack+0x119>
 2ce:	85 32       	cpi	r24, 0x25	; 37
 2d0:	39 f4       	brne	.+14     	; 0x2e0 <vfprintf+0x4e>
 2d2:	93 fd       	sbrc	r25, 3
 2d4:	85 91       	lpm	r24, Z+
 2d6:	93 ff       	sbrs	r25, 3
 2d8:	81 91       	ld	r24, Z+
 2da:	6f 01       	movw	r12, r30
 2dc:	85 32       	cpi	r24, 0x25	; 37
 2de:	21 f4       	brne	.+8      	; 0x2e8 <vfprintf+0x56>
 2e0:	b7 01       	movw	r22, r14
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	b9 d1       	rcall	.+882    	; 0x658 <fputc>
 2e6:	e8 cf       	rjmp	.-48     	; 0x2b8 <vfprintf+0x26>
 2e8:	51 2c       	mov	r5, r1
 2ea:	31 2c       	mov	r3, r1
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	20 32       	cpi	r18, 0x20	; 32
 2f0:	a8 f4       	brcc	.+42     	; 0x31c <vfprintf+0x8a>
 2f2:	8b 32       	cpi	r24, 0x2B	; 43
 2f4:	61 f0       	breq	.+24     	; 0x30e <vfprintf+0x7c>
 2f6:	28 f4       	brcc	.+10     	; 0x302 <vfprintf+0x70>
 2f8:	80 32       	cpi	r24, 0x20	; 32
 2fa:	51 f0       	breq	.+20     	; 0x310 <vfprintf+0x7e>
 2fc:	83 32       	cpi	r24, 0x23	; 35
 2fe:	71 f4       	brne	.+28     	; 0x31c <vfprintf+0x8a>
 300:	0b c0       	rjmp	.+22     	; 0x318 <vfprintf+0x86>
 302:	8d 32       	cpi	r24, 0x2D	; 45
 304:	39 f0       	breq	.+14     	; 0x314 <vfprintf+0x82>
 306:	80 33       	cpi	r24, 0x30	; 48
 308:	49 f4       	brne	.+18     	; 0x31c <vfprintf+0x8a>
 30a:	21 60       	ori	r18, 0x01	; 1
 30c:	28 c0       	rjmp	.+80     	; 0x35e <vfprintf+0xcc>
 30e:	22 60       	ori	r18, 0x02	; 2
 310:	24 60       	ori	r18, 0x04	; 4
 312:	25 c0       	rjmp	.+74     	; 0x35e <vfprintf+0xcc>
 314:	28 60       	ori	r18, 0x08	; 8
 316:	23 c0       	rjmp	.+70     	; 0x35e <vfprintf+0xcc>
 318:	20 61       	ori	r18, 0x10	; 16
 31a:	21 c0       	rjmp	.+66     	; 0x35e <vfprintf+0xcc>
 31c:	27 fd       	sbrc	r18, 7
 31e:	27 c0       	rjmp	.+78     	; 0x36e <vfprintf+0xdc>
 320:	38 2f       	mov	r19, r24
 322:	30 53       	subi	r19, 0x30	; 48
 324:	3a 30       	cpi	r19, 0x0A	; 10
 326:	78 f4       	brcc	.+30     	; 0x346 <vfprintf+0xb4>
 328:	26 ff       	sbrs	r18, 6
 32a:	06 c0       	rjmp	.+12     	; 0x338 <vfprintf+0xa6>
 32c:	fa e0       	ldi	r31, 0x0A	; 10
 32e:	5f 9e       	mul	r5, r31
 330:	30 0d       	add	r19, r0
 332:	11 24       	eor	r1, r1
 334:	53 2e       	mov	r5, r19
 336:	13 c0       	rjmp	.+38     	; 0x35e <vfprintf+0xcc>
 338:	8a e0       	ldi	r24, 0x0A	; 10
 33a:	38 9e       	mul	r3, r24
 33c:	30 0d       	add	r19, r0
 33e:	11 24       	eor	r1, r1
 340:	33 2e       	mov	r3, r19
 342:	20 62       	ori	r18, 0x20	; 32
 344:	0c c0       	rjmp	.+24     	; 0x35e <vfprintf+0xcc>
 346:	8e 32       	cpi	r24, 0x2E	; 46
 348:	21 f4       	brne	.+8      	; 0x352 <vfprintf+0xc0>
 34a:	26 fd       	sbrc	r18, 6
 34c:	65 c1       	rjmp	.+714    	; 0x618 <__stack+0x119>
 34e:	20 64       	ori	r18, 0x40	; 64
 350:	06 c0       	rjmp	.+12     	; 0x35e <vfprintf+0xcc>
 352:	8c 36       	cpi	r24, 0x6C	; 108
 354:	11 f4       	brne	.+4      	; 0x35a <vfprintf+0xc8>
 356:	20 68       	ori	r18, 0x80	; 128
 358:	02 c0       	rjmp	.+4      	; 0x35e <vfprintf+0xcc>
 35a:	88 36       	cpi	r24, 0x68	; 104
 35c:	41 f4       	brne	.+16     	; 0x36e <vfprintf+0xdc>
 35e:	f6 01       	movw	r30, r12
 360:	93 fd       	sbrc	r25, 3
 362:	85 91       	lpm	r24, Z+
 364:	93 ff       	sbrs	r25, 3
 366:	81 91       	ld	r24, Z+
 368:	6f 01       	movw	r12, r30
 36a:	81 11       	cpse	r24, r1
 36c:	c0 cf       	rjmp	.-128    	; 0x2ee <vfprintf+0x5c>
 36e:	98 2f       	mov	r25, r24
 370:	95 54       	subi	r25, 0x45	; 69
 372:	93 30       	cpi	r25, 0x03	; 3
 374:	18 f0       	brcs	.+6      	; 0x37c <vfprintf+0xea>
 376:	90 52       	subi	r25, 0x20	; 32
 378:	93 30       	cpi	r25, 0x03	; 3
 37a:	28 f4       	brcc	.+10     	; 0x386 <vfprintf+0xf4>
 37c:	0c 5f       	subi	r16, 0xFC	; 252
 37e:	1f 4f       	sbci	r17, 0xFF	; 255
 380:	ff e3       	ldi	r31, 0x3F	; 63
 382:	f9 83       	std	Y+1, r31	; 0x01
 384:	0d c0       	rjmp	.+26     	; 0x3a0 <vfprintf+0x10e>
 386:	83 36       	cpi	r24, 0x63	; 99
 388:	31 f0       	breq	.+12     	; 0x396 <vfprintf+0x104>
 38a:	83 37       	cpi	r24, 0x73	; 115
 38c:	71 f0       	breq	.+28     	; 0x3aa <vfprintf+0x118>
 38e:	83 35       	cpi	r24, 0x53	; 83
 390:	09 f0       	breq	.+2      	; 0x394 <vfprintf+0x102>
 392:	5a c0       	rjmp	.+180    	; 0x448 <vfprintf+0x1b6>
 394:	22 c0       	rjmp	.+68     	; 0x3da <vfprintf+0x148>
 396:	f8 01       	movw	r30, r16
 398:	80 81       	ld	r24, Z
 39a:	89 83       	std	Y+1, r24	; 0x01
 39c:	0e 5f       	subi	r16, 0xFE	; 254
 39e:	1f 4f       	sbci	r17, 0xFF	; 255
 3a0:	44 24       	eor	r4, r4
 3a2:	43 94       	inc	r4
 3a4:	51 2c       	mov	r5, r1
 3a6:	54 01       	movw	r10, r8
 3a8:	14 c0       	rjmp	.+40     	; 0x3d2 <vfprintf+0x140>
 3aa:	38 01       	movw	r6, r16
 3ac:	f2 e0       	ldi	r31, 0x02	; 2
 3ae:	6f 0e       	add	r6, r31
 3b0:	71 1c       	adc	r7, r1
 3b2:	f8 01       	movw	r30, r16
 3b4:	a0 80       	ld	r10, Z
 3b6:	b1 80       	ldd	r11, Z+1	; 0x01
 3b8:	26 ff       	sbrs	r18, 6
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <vfprintf+0x130>
 3bc:	65 2d       	mov	r22, r5
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <vfprintf+0x134>
 3c2:	6f ef       	ldi	r22, 0xFF	; 255
 3c4:	7f ef       	ldi	r23, 0xFF	; 255
 3c6:	c5 01       	movw	r24, r10
 3c8:	2c 87       	std	Y+12, r18	; 0x0c
 3ca:	3b d1       	rcall	.+630    	; 0x642 <strnlen>
 3cc:	2c 01       	movw	r4, r24
 3ce:	83 01       	movw	r16, r6
 3d0:	2c 85       	ldd	r18, Y+12	; 0x0c
 3d2:	6f e7       	ldi	r22, 0x7F	; 127
 3d4:	26 2e       	mov	r2, r22
 3d6:	22 22       	and	r2, r18
 3d8:	17 c0       	rjmp	.+46     	; 0x408 <vfprintf+0x176>
 3da:	38 01       	movw	r6, r16
 3dc:	f2 e0       	ldi	r31, 0x02	; 2
 3de:	6f 0e       	add	r6, r31
 3e0:	71 1c       	adc	r7, r1
 3e2:	f8 01       	movw	r30, r16
 3e4:	a0 80       	ld	r10, Z
 3e6:	b1 80       	ldd	r11, Z+1	; 0x01
 3e8:	26 ff       	sbrs	r18, 6
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <vfprintf+0x160>
 3ec:	65 2d       	mov	r22, r5
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <vfprintf+0x164>
 3f2:	6f ef       	ldi	r22, 0xFF	; 255
 3f4:	7f ef       	ldi	r23, 0xFF	; 255
 3f6:	c5 01       	movw	r24, r10
 3f8:	2c 87       	std	Y+12, r18	; 0x0c
 3fa:	18 d1       	rcall	.+560    	; 0x62c <strnlen_P>
 3fc:	2c 01       	movw	r4, r24
 3fe:	2c 85       	ldd	r18, Y+12	; 0x0c
 400:	50 e8       	ldi	r21, 0x80	; 128
 402:	25 2e       	mov	r2, r21
 404:	22 2a       	or	r2, r18
 406:	83 01       	movw	r16, r6
 408:	23 fc       	sbrc	r2, 3
 40a:	1a c0       	rjmp	.+52     	; 0x440 <vfprintf+0x1ae>
 40c:	05 c0       	rjmp	.+10     	; 0x418 <vfprintf+0x186>
 40e:	b7 01       	movw	r22, r14
 410:	80 e2       	ldi	r24, 0x20	; 32
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	21 d1       	rcall	.+578    	; 0x658 <fputc>
 416:	3a 94       	dec	r3
 418:	83 2d       	mov	r24, r3
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	48 16       	cp	r4, r24
 41e:	59 06       	cpc	r5, r25
 420:	b0 f3       	brcs	.-20     	; 0x40e <vfprintf+0x17c>
 422:	0e c0       	rjmp	.+28     	; 0x440 <vfprintf+0x1ae>
 424:	f5 01       	movw	r30, r10
 426:	27 fc       	sbrc	r2, 7
 428:	85 91       	lpm	r24, Z+
 42a:	27 fe       	sbrs	r2, 7
 42c:	81 91       	ld	r24, Z+
 42e:	5f 01       	movw	r10, r30
 430:	b7 01       	movw	r22, r14
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	11 d1       	rcall	.+546    	; 0x658 <fputc>
 436:	31 10       	cpse	r3, r1
 438:	3a 94       	dec	r3
 43a:	f1 e0       	ldi	r31, 0x01	; 1
 43c:	4f 1a       	sub	r4, r31
 43e:	51 08       	sbc	r5, r1
 440:	41 14       	cp	r4, r1
 442:	51 04       	cpc	r5, r1
 444:	79 f7       	brne	.-34     	; 0x424 <vfprintf+0x192>
 446:	e5 c0       	rjmp	.+458    	; 0x612 <__stack+0x113>
 448:	84 36       	cpi	r24, 0x64	; 100
 44a:	11 f0       	breq	.+4      	; 0x450 <vfprintf+0x1be>
 44c:	89 36       	cpi	r24, 0x69	; 105
 44e:	39 f5       	brne	.+78     	; 0x49e <vfprintf+0x20c>
 450:	f8 01       	movw	r30, r16
 452:	27 ff       	sbrs	r18, 7
 454:	07 c0       	rjmp	.+14     	; 0x464 <vfprintf+0x1d2>
 456:	60 81       	ld	r22, Z
 458:	71 81       	ldd	r23, Z+1	; 0x01
 45a:	82 81       	ldd	r24, Z+2	; 0x02
 45c:	93 81       	ldd	r25, Z+3	; 0x03
 45e:	0c 5f       	subi	r16, 0xFC	; 252
 460:	1f 4f       	sbci	r17, 0xFF	; 255
 462:	08 c0       	rjmp	.+16     	; 0x474 <vfprintf+0x1e2>
 464:	60 81       	ld	r22, Z
 466:	71 81       	ldd	r23, Z+1	; 0x01
 468:	88 27       	eor	r24, r24
 46a:	77 fd       	sbrc	r23, 7
 46c:	80 95       	com	r24
 46e:	98 2f       	mov	r25, r24
 470:	0e 5f       	subi	r16, 0xFE	; 254
 472:	1f 4f       	sbci	r17, 0xFF	; 255
 474:	4f e6       	ldi	r20, 0x6F	; 111
 476:	b4 2e       	mov	r11, r20
 478:	b2 22       	and	r11, r18
 47a:	97 ff       	sbrs	r25, 7
 47c:	09 c0       	rjmp	.+18     	; 0x490 <vfprintf+0x1fe>
 47e:	90 95       	com	r25
 480:	80 95       	com	r24
 482:	70 95       	com	r23
 484:	61 95       	neg	r22
 486:	7f 4f       	sbci	r23, 0xFF	; 255
 488:	8f 4f       	sbci	r24, 0xFF	; 255
 48a:	9f 4f       	sbci	r25, 0xFF	; 255
 48c:	f0 e8       	ldi	r31, 0x80	; 128
 48e:	bf 2a       	or	r11, r31
 490:	2a e0       	ldi	r18, 0x0A	; 10
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	a4 01       	movw	r20, r8
 496:	0c d1       	rcall	.+536    	; 0x6b0 <__ultoa_invert>
 498:	a8 2e       	mov	r10, r24
 49a:	a8 18       	sub	r10, r8
 49c:	42 c0       	rjmp	.+132    	; 0x522 <__stack+0x23>
 49e:	85 37       	cpi	r24, 0x75	; 117
 4a0:	31 f4       	brne	.+12     	; 0x4ae <vfprintf+0x21c>
 4a2:	3f ee       	ldi	r19, 0xEF	; 239
 4a4:	b3 2e       	mov	r11, r19
 4a6:	b2 22       	and	r11, r18
 4a8:	2a e0       	ldi	r18, 0x0A	; 10
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	24 c0       	rjmp	.+72     	; 0x4f6 <vfprintf+0x264>
 4ae:	99 ef       	ldi	r25, 0xF9	; 249
 4b0:	b9 2e       	mov	r11, r25
 4b2:	b2 22       	and	r11, r18
 4b4:	8f 36       	cpi	r24, 0x6F	; 111
 4b6:	b9 f0       	breq	.+46     	; 0x4e6 <vfprintf+0x254>
 4b8:	20 f4       	brcc	.+8      	; 0x4c2 <vfprintf+0x230>
 4ba:	88 35       	cpi	r24, 0x58	; 88
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <vfprintf+0x22e>
 4be:	ac c0       	rjmp	.+344    	; 0x618 <__stack+0x119>
 4c0:	0d c0       	rjmp	.+26     	; 0x4dc <vfprintf+0x24a>
 4c2:	80 37       	cpi	r24, 0x70	; 112
 4c4:	21 f0       	breq	.+8      	; 0x4ce <vfprintf+0x23c>
 4c6:	88 37       	cpi	r24, 0x78	; 120
 4c8:	09 f0       	breq	.+2      	; 0x4cc <vfprintf+0x23a>
 4ca:	a6 c0       	rjmp	.+332    	; 0x618 <__stack+0x119>
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <vfprintf+0x240>
 4ce:	20 e1       	ldi	r18, 0x10	; 16
 4d0:	b2 2a       	or	r11, r18
 4d2:	b4 fe       	sbrs	r11, 4
 4d4:	0b c0       	rjmp	.+22     	; 0x4ec <vfprintf+0x25a>
 4d6:	84 e0       	ldi	r24, 0x04	; 4
 4d8:	b8 2a       	or	r11, r24
 4da:	08 c0       	rjmp	.+16     	; 0x4ec <vfprintf+0x25a>
 4dc:	24 ff       	sbrs	r18, 4
 4de:	09 c0       	rjmp	.+18     	; 0x4f2 <vfprintf+0x260>
 4e0:	e6 e0       	ldi	r30, 0x06	; 6
 4e2:	be 2a       	or	r11, r30
 4e4:	06 c0       	rjmp	.+12     	; 0x4f2 <vfprintf+0x260>
 4e6:	28 e0       	ldi	r18, 0x08	; 8
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <vfprintf+0x264>
 4ec:	20 e1       	ldi	r18, 0x10	; 16
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <vfprintf+0x264>
 4f2:	20 e1       	ldi	r18, 0x10	; 16
 4f4:	32 e0       	ldi	r19, 0x02	; 2
 4f6:	f8 01       	movw	r30, r16
 4f8:	b7 fe       	sbrs	r11, 7
 4fa:	07 c0       	rjmp	.+14     	; 0x50a <__stack+0xb>
 4fc:	60 81       	ld	r22, Z
 4fe:	71 81       	ldd	r23, Z+1	; 0x01
 500:	82 81       	ldd	r24, Z+2	; 0x02
 502:	93 81       	ldd	r25, Z+3	; 0x03
 504:	0c 5f       	subi	r16, 0xFC	; 252
 506:	1f 4f       	sbci	r17, 0xFF	; 255
 508:	06 c0       	rjmp	.+12     	; 0x516 <__stack+0x17>
 50a:	60 81       	ld	r22, Z
 50c:	71 81       	ldd	r23, Z+1	; 0x01
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 5f       	subi	r16, 0xFE	; 254
 514:	1f 4f       	sbci	r17, 0xFF	; 255
 516:	a4 01       	movw	r20, r8
 518:	cb d0       	rcall	.+406    	; 0x6b0 <__ultoa_invert>
 51a:	a8 2e       	mov	r10, r24
 51c:	a8 18       	sub	r10, r8
 51e:	ff e7       	ldi	r31, 0x7F	; 127
 520:	bf 22       	and	r11, r31
 522:	b6 fe       	sbrs	r11, 6
 524:	0b c0       	rjmp	.+22     	; 0x53c <__stack+0x3d>
 526:	2b 2d       	mov	r18, r11
 528:	2e 7f       	andi	r18, 0xFE	; 254
 52a:	a5 14       	cp	r10, r5
 52c:	50 f4       	brcc	.+20     	; 0x542 <__stack+0x43>
 52e:	b4 fe       	sbrs	r11, 4
 530:	0a c0       	rjmp	.+20     	; 0x546 <__stack+0x47>
 532:	b2 fc       	sbrc	r11, 2
 534:	08 c0       	rjmp	.+16     	; 0x546 <__stack+0x47>
 536:	2b 2d       	mov	r18, r11
 538:	2e 7e       	andi	r18, 0xEE	; 238
 53a:	05 c0       	rjmp	.+10     	; 0x546 <__stack+0x47>
 53c:	7a 2c       	mov	r7, r10
 53e:	2b 2d       	mov	r18, r11
 540:	03 c0       	rjmp	.+6      	; 0x548 <__stack+0x49>
 542:	7a 2c       	mov	r7, r10
 544:	01 c0       	rjmp	.+2      	; 0x548 <__stack+0x49>
 546:	75 2c       	mov	r7, r5
 548:	24 ff       	sbrs	r18, 4
 54a:	0d c0       	rjmp	.+26     	; 0x566 <__stack+0x67>
 54c:	fe 01       	movw	r30, r28
 54e:	ea 0d       	add	r30, r10
 550:	f1 1d       	adc	r31, r1
 552:	80 81       	ld	r24, Z
 554:	80 33       	cpi	r24, 0x30	; 48
 556:	11 f4       	brne	.+4      	; 0x55c <__stack+0x5d>
 558:	29 7e       	andi	r18, 0xE9	; 233
 55a:	09 c0       	rjmp	.+18     	; 0x56e <__stack+0x6f>
 55c:	22 ff       	sbrs	r18, 2
 55e:	06 c0       	rjmp	.+12     	; 0x56c <__stack+0x6d>
 560:	73 94       	inc	r7
 562:	73 94       	inc	r7
 564:	04 c0       	rjmp	.+8      	; 0x56e <__stack+0x6f>
 566:	82 2f       	mov	r24, r18
 568:	86 78       	andi	r24, 0x86	; 134
 56a:	09 f0       	breq	.+2      	; 0x56e <__stack+0x6f>
 56c:	73 94       	inc	r7
 56e:	23 fd       	sbrc	r18, 3
 570:	13 c0       	rjmp	.+38     	; 0x598 <__stack+0x99>
 572:	20 ff       	sbrs	r18, 0
 574:	0e c0       	rjmp	.+28     	; 0x592 <__stack+0x93>
 576:	5a 2c       	mov	r5, r10
 578:	73 14       	cp	r7, r3
 57a:	58 f4       	brcc	.+22     	; 0x592 <__stack+0x93>
 57c:	53 0c       	add	r5, r3
 57e:	57 18       	sub	r5, r7
 580:	73 2c       	mov	r7, r3
 582:	07 c0       	rjmp	.+14     	; 0x592 <__stack+0x93>
 584:	b7 01       	movw	r22, r14
 586:	80 e2       	ldi	r24, 0x20	; 32
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	2c 87       	std	Y+12, r18	; 0x0c
 58c:	65 d0       	rcall	.+202    	; 0x658 <fputc>
 58e:	73 94       	inc	r7
 590:	2c 85       	ldd	r18, Y+12	; 0x0c
 592:	73 14       	cp	r7, r3
 594:	b8 f3       	brcs	.-18     	; 0x584 <__stack+0x85>
 596:	04 c0       	rjmp	.+8      	; 0x5a0 <__stack+0xa1>
 598:	73 14       	cp	r7, r3
 59a:	10 f4       	brcc	.+4      	; 0x5a0 <__stack+0xa1>
 59c:	37 18       	sub	r3, r7
 59e:	01 c0       	rjmp	.+2      	; 0x5a2 <__stack+0xa3>
 5a0:	31 2c       	mov	r3, r1
 5a2:	24 ff       	sbrs	r18, 4
 5a4:	11 c0       	rjmp	.+34     	; 0x5c8 <__stack+0xc9>
 5a6:	b7 01       	movw	r22, r14
 5a8:	80 e3       	ldi	r24, 0x30	; 48
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	2c 87       	std	Y+12, r18	; 0x0c
 5ae:	54 d0       	rcall	.+168    	; 0x658 <fputc>
 5b0:	2c 85       	ldd	r18, Y+12	; 0x0c
 5b2:	22 ff       	sbrs	r18, 2
 5b4:	1c c0       	rjmp	.+56     	; 0x5ee <__stack+0xef>
 5b6:	21 ff       	sbrs	r18, 1
 5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <__stack+0xc1>
 5ba:	88 e5       	ldi	r24, 0x58	; 88
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <__stack+0xc5>
 5c0:	88 e7       	ldi	r24, 0x78	; 120
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	b7 01       	movw	r22, r14
 5c6:	0c c0       	rjmp	.+24     	; 0x5e0 <__stack+0xe1>
 5c8:	82 2f       	mov	r24, r18
 5ca:	86 78       	andi	r24, 0x86	; 134
 5cc:	81 f0       	breq	.+32     	; 0x5ee <__stack+0xef>
 5ce:	21 fd       	sbrc	r18, 1
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <__stack+0xd7>
 5d2:	80 e2       	ldi	r24, 0x20	; 32
 5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <__stack+0xd9>
 5d6:	8b e2       	ldi	r24, 0x2B	; 43
 5d8:	27 fd       	sbrc	r18, 7
 5da:	8d e2       	ldi	r24, 0x2D	; 45
 5dc:	b7 01       	movw	r22, r14
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	3b d0       	rcall	.+118    	; 0x658 <fputc>
 5e2:	05 c0       	rjmp	.+10     	; 0x5ee <__stack+0xef>
 5e4:	b7 01       	movw	r22, r14
 5e6:	80 e3       	ldi	r24, 0x30	; 48
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	36 d0       	rcall	.+108    	; 0x658 <fputc>
 5ec:	5a 94       	dec	r5
 5ee:	a5 14       	cp	r10, r5
 5f0:	c8 f3       	brcs	.-14     	; 0x5e4 <__stack+0xe5>
 5f2:	aa 94       	dec	r10
 5f4:	f4 01       	movw	r30, r8
 5f6:	ea 0d       	add	r30, r10
 5f8:	f1 1d       	adc	r31, r1
 5fa:	b7 01       	movw	r22, r14
 5fc:	80 81       	ld	r24, Z
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	2b d0       	rcall	.+86     	; 0x658 <fputc>
 602:	a1 10       	cpse	r10, r1
 604:	f6 cf       	rjmp	.-20     	; 0x5f2 <__stack+0xf3>
 606:	05 c0       	rjmp	.+10     	; 0x612 <__stack+0x113>
 608:	b7 01       	movw	r22, r14
 60a:	80 e2       	ldi	r24, 0x20	; 32
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	24 d0       	rcall	.+72     	; 0x658 <fputc>
 610:	3a 94       	dec	r3
 612:	31 10       	cpse	r3, r1
 614:	f9 cf       	rjmp	.-14     	; 0x608 <__stack+0x109>
 616:	50 ce       	rjmp	.-864    	; 0x2b8 <vfprintf+0x26>
 618:	f7 01       	movw	r30, r14
 61a:	26 81       	ldd	r18, Z+6	; 0x06
 61c:	37 81       	ldd	r19, Z+7	; 0x07
 61e:	02 c0       	rjmp	.+4      	; 0x624 <__stack+0x125>
 620:	2f ef       	ldi	r18, 0xFF	; 255
 622:	3f ef       	ldi	r19, 0xFF	; 255
 624:	c9 01       	movw	r24, r18
 626:	2c 96       	adiw	r28, 0x0c	; 12
 628:	e2 e1       	ldi	r30, 0x12	; 18
 62a:	bc c0       	rjmp	.+376    	; 0x7a4 <__epilogue_restores__>

0000062c <strnlen_P>:
 62c:	fc 01       	movw	r30, r24
 62e:	05 90       	lpm	r0, Z+
 630:	61 50       	subi	r22, 0x01	; 1
 632:	70 40       	sbci	r23, 0x00	; 0
 634:	01 10       	cpse	r0, r1
 636:	d8 f7       	brcc	.-10     	; 0x62e <strnlen_P+0x2>
 638:	80 95       	com	r24
 63a:	90 95       	com	r25
 63c:	8e 0f       	add	r24, r30
 63e:	9f 1f       	adc	r25, r31
 640:	08 95       	ret

00000642 <strnlen>:
 642:	fc 01       	movw	r30, r24
 644:	61 50       	subi	r22, 0x01	; 1
 646:	70 40       	sbci	r23, 0x00	; 0
 648:	01 90       	ld	r0, Z+
 64a:	01 10       	cpse	r0, r1
 64c:	d8 f7       	brcc	.-10     	; 0x644 <strnlen+0x2>
 64e:	80 95       	com	r24
 650:	90 95       	com	r25
 652:	8e 0f       	add	r24, r30
 654:	9f 1f       	adc	r25, r31
 656:	08 95       	ret

00000658 <fputc>:
 658:	0f 93       	push	r16
 65a:	1f 93       	push	r17
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	8c 01       	movw	r16, r24
 662:	eb 01       	movw	r28, r22
 664:	8b 81       	ldd	r24, Y+3	; 0x03
 666:	81 fd       	sbrc	r24, 1
 668:	03 c0       	rjmp	.+6      	; 0x670 <fputc+0x18>
 66a:	0f ef       	ldi	r16, 0xFF	; 255
 66c:	1f ef       	ldi	r17, 0xFF	; 255
 66e:	1a c0       	rjmp	.+52     	; 0x6a4 <fputc+0x4c>
 670:	82 ff       	sbrs	r24, 2
 672:	0d c0       	rjmp	.+26     	; 0x68e <fputc+0x36>
 674:	2e 81       	ldd	r18, Y+6	; 0x06
 676:	3f 81       	ldd	r19, Y+7	; 0x07
 678:	8c 81       	ldd	r24, Y+4	; 0x04
 67a:	9d 81       	ldd	r25, Y+5	; 0x05
 67c:	28 17       	cp	r18, r24
 67e:	39 07       	cpc	r19, r25
 680:	64 f4       	brge	.+24     	; 0x69a <fputc+0x42>
 682:	e8 81       	ld	r30, Y
 684:	f9 81       	ldd	r31, Y+1	; 0x01
 686:	01 93       	st	Z+, r16
 688:	f9 83       	std	Y+1, r31	; 0x01
 68a:	e8 83       	st	Y, r30
 68c:	06 c0       	rjmp	.+12     	; 0x69a <fputc+0x42>
 68e:	e8 85       	ldd	r30, Y+8	; 0x08
 690:	f9 85       	ldd	r31, Y+9	; 0x09
 692:	80 2f       	mov	r24, r16
 694:	09 95       	icall
 696:	89 2b       	or	r24, r25
 698:	41 f7       	brne	.-48     	; 0x66a <fputc+0x12>
 69a:	8e 81       	ldd	r24, Y+6	; 0x06
 69c:	9f 81       	ldd	r25, Y+7	; 0x07
 69e:	01 96       	adiw	r24, 0x01	; 1
 6a0:	9f 83       	std	Y+7, r25	; 0x07
 6a2:	8e 83       	std	Y+6, r24	; 0x06
 6a4:	c8 01       	movw	r24, r16
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	1f 91       	pop	r17
 6ac:	0f 91       	pop	r16
 6ae:	08 95       	ret

000006b0 <__ultoa_invert>:
 6b0:	fa 01       	movw	r30, r20
 6b2:	aa 27       	eor	r26, r26
 6b4:	28 30       	cpi	r18, 0x08	; 8
 6b6:	51 f1       	breq	.+84     	; 0x70c <__ultoa_invert+0x5c>
 6b8:	20 31       	cpi	r18, 0x10	; 16
 6ba:	81 f1       	breq	.+96     	; 0x71c <__ultoa_invert+0x6c>
 6bc:	e8 94       	clt
 6be:	6f 93       	push	r22
 6c0:	6e 7f       	andi	r22, 0xFE	; 254
 6c2:	6e 5f       	subi	r22, 0xFE	; 254
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255
 6c6:	8f 4f       	sbci	r24, 0xFF	; 255
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	af 4f       	sbci	r26, 0xFF	; 255
 6cc:	b1 e0       	ldi	r27, 0x01	; 1
 6ce:	3e d0       	rcall	.+124    	; 0x74c <__ultoa_invert+0x9c>
 6d0:	b4 e0       	ldi	r27, 0x04	; 4
 6d2:	3c d0       	rcall	.+120    	; 0x74c <__ultoa_invert+0x9c>
 6d4:	67 0f       	add	r22, r23
 6d6:	78 1f       	adc	r23, r24
 6d8:	89 1f       	adc	r24, r25
 6da:	9a 1f       	adc	r25, r26
 6dc:	a1 1d       	adc	r26, r1
 6de:	68 0f       	add	r22, r24
 6e0:	79 1f       	adc	r23, r25
 6e2:	8a 1f       	adc	r24, r26
 6e4:	91 1d       	adc	r25, r1
 6e6:	a1 1d       	adc	r26, r1
 6e8:	6a 0f       	add	r22, r26
 6ea:	71 1d       	adc	r23, r1
 6ec:	81 1d       	adc	r24, r1
 6ee:	91 1d       	adc	r25, r1
 6f0:	a1 1d       	adc	r26, r1
 6f2:	20 d0       	rcall	.+64     	; 0x734 <__ultoa_invert+0x84>
 6f4:	09 f4       	brne	.+2      	; 0x6f8 <__ultoa_invert+0x48>
 6f6:	68 94       	set
 6f8:	3f 91       	pop	r19
 6fa:	2a e0       	ldi	r18, 0x0A	; 10
 6fc:	26 9f       	mul	r18, r22
 6fe:	11 24       	eor	r1, r1
 700:	30 19       	sub	r19, r0
 702:	30 5d       	subi	r19, 0xD0	; 208
 704:	31 93       	st	Z+, r19
 706:	de f6       	brtc	.-74     	; 0x6be <__ultoa_invert+0xe>
 708:	cf 01       	movw	r24, r30
 70a:	08 95       	ret
 70c:	46 2f       	mov	r20, r22
 70e:	47 70       	andi	r20, 0x07	; 7
 710:	40 5d       	subi	r20, 0xD0	; 208
 712:	41 93       	st	Z+, r20
 714:	b3 e0       	ldi	r27, 0x03	; 3
 716:	0f d0       	rcall	.+30     	; 0x736 <__ultoa_invert+0x86>
 718:	c9 f7       	brne	.-14     	; 0x70c <__ultoa_invert+0x5c>
 71a:	f6 cf       	rjmp	.-20     	; 0x708 <__ultoa_invert+0x58>
 71c:	46 2f       	mov	r20, r22
 71e:	4f 70       	andi	r20, 0x0F	; 15
 720:	40 5d       	subi	r20, 0xD0	; 208
 722:	4a 33       	cpi	r20, 0x3A	; 58
 724:	18 f0       	brcs	.+6      	; 0x72c <__ultoa_invert+0x7c>
 726:	49 5d       	subi	r20, 0xD9	; 217
 728:	31 fd       	sbrc	r19, 1
 72a:	40 52       	subi	r20, 0x20	; 32
 72c:	41 93       	st	Z+, r20
 72e:	02 d0       	rcall	.+4      	; 0x734 <__ultoa_invert+0x84>
 730:	a9 f7       	brne	.-22     	; 0x71c <__ultoa_invert+0x6c>
 732:	ea cf       	rjmp	.-44     	; 0x708 <__ultoa_invert+0x58>
 734:	b4 e0       	ldi	r27, 0x04	; 4
 736:	a6 95       	lsr	r26
 738:	97 95       	ror	r25
 73a:	87 95       	ror	r24
 73c:	77 95       	ror	r23
 73e:	67 95       	ror	r22
 740:	ba 95       	dec	r27
 742:	c9 f7       	brne	.-14     	; 0x736 <__ultoa_invert+0x86>
 744:	00 97       	sbiw	r24, 0x00	; 0
 746:	61 05       	cpc	r22, r1
 748:	71 05       	cpc	r23, r1
 74a:	08 95       	ret
 74c:	9b 01       	movw	r18, r22
 74e:	ac 01       	movw	r20, r24
 750:	0a 2e       	mov	r0, r26
 752:	06 94       	lsr	r0
 754:	57 95       	ror	r21
 756:	47 95       	ror	r20
 758:	37 95       	ror	r19
 75a:	27 95       	ror	r18
 75c:	ba 95       	dec	r27
 75e:	c9 f7       	brne	.-14     	; 0x752 <__ultoa_invert+0xa2>
 760:	62 0f       	add	r22, r18
 762:	73 1f       	adc	r23, r19
 764:	84 1f       	adc	r24, r20
 766:	95 1f       	adc	r25, r21
 768:	a0 1d       	adc	r26, r0
 76a:	08 95       	ret

0000076c <__prologue_saves__>:
 76c:	2f 92       	push	r2
 76e:	3f 92       	push	r3
 770:	4f 92       	push	r4
 772:	5f 92       	push	r5
 774:	6f 92       	push	r6
 776:	7f 92       	push	r7
 778:	8f 92       	push	r8
 77a:	9f 92       	push	r9
 77c:	af 92       	push	r10
 77e:	bf 92       	push	r11
 780:	cf 92       	push	r12
 782:	df 92       	push	r13
 784:	ef 92       	push	r14
 786:	ff 92       	push	r15
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	cd b7       	in	r28, 0x3d	; 61
 792:	de b7       	in	r29, 0x3e	; 62
 794:	ca 1b       	sub	r28, r26
 796:	db 0b       	sbc	r29, r27
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	f8 94       	cli
 79c:	de bf       	out	0x3e, r29	; 62
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	cd bf       	out	0x3d, r28	; 61
 7a2:	09 94       	ijmp

000007a4 <__epilogue_restores__>:
 7a4:	2a 88       	ldd	r2, Y+18	; 0x12
 7a6:	39 88       	ldd	r3, Y+17	; 0x11
 7a8:	48 88       	ldd	r4, Y+16	; 0x10
 7aa:	5f 84       	ldd	r5, Y+15	; 0x0f
 7ac:	6e 84       	ldd	r6, Y+14	; 0x0e
 7ae:	7d 84       	ldd	r7, Y+13	; 0x0d
 7b0:	8c 84       	ldd	r8, Y+12	; 0x0c
 7b2:	9b 84       	ldd	r9, Y+11	; 0x0b
 7b4:	aa 84       	ldd	r10, Y+10	; 0x0a
 7b6:	b9 84       	ldd	r11, Y+9	; 0x09
 7b8:	c8 84       	ldd	r12, Y+8	; 0x08
 7ba:	df 80       	ldd	r13, Y+7	; 0x07
 7bc:	ee 80       	ldd	r14, Y+6	; 0x06
 7be:	fd 80       	ldd	r15, Y+5	; 0x05
 7c0:	0c 81       	ldd	r16, Y+4	; 0x04
 7c2:	1b 81       	ldd	r17, Y+3	; 0x03
 7c4:	aa 81       	ldd	r26, Y+2	; 0x02
 7c6:	b9 81       	ldd	r27, Y+1	; 0x01
 7c8:	ce 0f       	add	r28, r30
 7ca:	d1 1d       	adc	r29, r1
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	f8 94       	cli
 7d0:	de bf       	out	0x3e, r29	; 62
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	cd bf       	out	0x3d, r28	; 61
 7d6:	ed 01       	movw	r28, r26
 7d8:	08 95       	ret

000007da <_exit>:
 7da:	f8 94       	cli

000007dc <__stop_program>:
 7dc:	ff cf       	rjmp	.-2      	; 0x7dc <__stop_program>
